name: 'Language Detector'
description: 'Detects programming languages in repository using GitHub API and creates scanner matrix'

inputs:
  repo:
    description: 'Repository in format owner/repo'
    required: true

outputs:
  languages:
    description: 'JSON array of detected languages'
    value: ${{ steps.detect.outputs.languages }}
  matrix:
    description: 'Scanner matrix configuration'
    value: ${{ steps.create-matrix.outputs.matrix }}

runs:
  using: 'composite'
  steps:
    - name: Detect Languages via GitHub API
      id: detect
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        REPO: ${{ inputs.repo }}
      run: |
        # Get languages from GitHub API
        echo "Fetching languages for repository: $REPO"

        api_response=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/languages" 2>/dev/null || echo "{}")

        echo "GitHub API response: $api_response"

        # Show detected GitHub languages
        detected_github_langs=$(echo "$api_response" | jq -r 'keys[]' 2>/dev/null || echo "none")
        echo "GitHub detected languages: $detected_github_langs"

        # Initialize language array
        languages=()

        # Map GitHub language names to CodeQL/scanner language names
        echo "Starting language mapping..."
        if echo "$api_response" | jq -r 'keys[]' | grep -qi "javascript"; then
          echo "✓ Found JavaScript - adding to scanner list"
          languages+=("javascript")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "typescript"; then
          echo "✓ Found TypeScript - adding to scanner list"
          languages+=("typescript")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "python"; then
          echo "✓ Found Python - adding to scanner list"
          languages+=("python")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "go"; then
          echo "✓ Found Go - adding to scanner list"
          languages+=("go")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "java"; then
          echo "✓ Found Java - adding to scanner list"
          languages+=("java")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi -E "c\+\+|c"; then
          echo "✓ Found C/C++ - adding to scanner list as 'cpp'"
          languages+=("cpp")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "c#"; then
          echo "✓ Found C# - adding to scanner list as 'csharp'"
          languages+=("csharp")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "ruby"; then
          echo "✓ Found Ruby - adding to scanner list"
          languages+=("ruby")
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "kotlin"; then
          echo "✓ Found Kotlin - adding to scanner list as 'java'"
          languages+=("java")  # Kotlin uses java scanner in CodeQL
        fi

        if echo "$api_response" | jq -r 'keys[]' | grep -qi "solidity"; then
          # Solidity will be handled by semgrep primarily, but note it exists
          echo "Detected Solidity - will be scanned by Semgrep"
        fi

        # Show final detection results
        echo "Language detection summary: Found ${#languages[@]} languages for CodeQL scanning"
        printf "Languages to scan: %s\n" "${languages[@]}"

        # Default to javascript if no languages detected or API call failed
        if [[ ${#languages[@]} -eq 0 ]]; then
          echo "⚠️  No languages detected or API call failed, defaulting to javascript"
          languages+=("javascript")
        fi

        # Convert to JSON array
        printf -v json_languages '%s,' "${languages[@]}"
        json_languages="[\"${json_languages%,}\"]"
        json_languages=$(echo "$json_languages" | sed 's/","/", "/g')

        echo "languages=$json_languages" >> $GITHUB_OUTPUT
        echo "Detected languages: $json_languages"

    - name: Create Scanner Matrix
      id: create-matrix
      shell: bash
      env:
        DETECTED_LANGUAGES: ${{ steps.detect.outputs.languages }}
      run: |
        # Create matrix based on detected languages
        matrix_includes=()

        # Parse JSON array
        languages=$(echo "$DETECTED_LANGUAGES" | sed 's/\["\|"\]//g' | tr ',' '\n' | sed 's/^"//' | sed 's/"$//')

        while IFS= read -r lang; do
          lang=$(echo "$lang" | xargs) # trim whitespace
          case "$lang" in
            "javascript"|"typescript")
              matrix_includes+=('{"language":"'$lang'","scanner":"codeql"}')
              ;;
            "python")
              matrix_includes+=('{"language":"python","scanner":"codeql"}')
              ;;
            "go")
              matrix_includes+=('{"language":"go","scanner":"codeql"}')
              ;;
            "java")
              matrix_includes+=('{"language":"java","scanner":"codeql"}')
              ;;
            "cpp")
              matrix_includes+=('{"language":"cpp","scanner":"codeql"}')
              ;;
            "csharp")
              matrix_includes+=('{"language":"csharp","scanner":"codeql"}')
              ;;
            "ruby")
              matrix_includes+=('{"language":"ruby","scanner":"codeql"}')
              ;;
          esac
        done <<< "$languages"

        

        # Build final matrix
        printf -v matrix_str '%s,' "${matrix_includes[@]}"
        matrix="{\"include\":[${matrix_str%,}]}"

        echo "matrix=$matrix" >> $GITHUB_OUTPUT
        echo "Created matrix: $matrix"